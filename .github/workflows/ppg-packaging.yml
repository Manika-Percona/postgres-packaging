name: PG Packages

on:
  workflow_dispatch:
    inputs:
      package:
        description: package name
        required: true
        default: postgres
        type: choice
        options:
          - etcd
          - llvm
          - patroni
          - pg_cron
          - pg_gather
          - pg_repack
          - pgaudit
          - pgaudit_set_user
          - pgbackrest
          - pgbadger
          - pgbouncer
          - pgpool2
          - pgvector
          - postgis
          - postgres
          - postgres-common
          - ppg-server
          - ppg-server-ha
          - psycopg2
          - pysyncobj
          - timescaledb
          - wal2json
          - ydiff

      packaging-repo:
        description: packaging repo to be used
        default: Manika-Percona/postgres-packaging
        required: true

      install_deps:
        description: install_deps
        default: true
        type: boolean

      get_sources:
        description: get_sources
        default: false
        type: boolean

      build_src_rpm:
        description: build_src_rpm
        default: false
        type: boolean

      build_rpm:
        description: build_rpm
        default: false
        type: boolean

      branch:
        description: branch for build options
        required: true

      additional_options:
        description: additional build options if any
        required: false

      debugging:
        description: tmate session required
        default: false
        type: boolean
        
jobs:
  prepare:
   runs-on: ubuntu-latest

   steps:
     - name: Checkout packaging repo
       uses: actions/checkout@v4
       with:
         fetch-depth: 0
         repository: ${{ inputs.packaging-repo }}
         ref: ${{ github.ref_name }}
         path: postgres-packaging
        
     - name: Create archive of packaging files
       run: |
        mkdir pkg
        if [[ "${{ inputs.package }}" = "postgres" ]]; then
         cp postgres-packaging/${{ inputs.package }}/ppg_builder.sh pkg/pkg-builder.sh
        else
         cp postgres-packaging/${{ inputs.package }}/*builder.sh pkg/pkg-builder.sh
        fi
        cp postgres-packaging/common-functions.sh pkg/
        cp postgres-packaging/install-deps.sh pkg/
        cp postgres-packaging/versions.sh pkg/
       shell: bash

     - name: Upload build files as artifact
       uses: actions/upload-artifact@v4
       with:
         name: build-files
         path: pkg/

  build:
    runs-on: ubuntu-latest
    needs: prepare
    container:
      image: oraclelinux:10

    steps:
      - name: Check OS
        run: cat /etc/os-release

      - name: Install build tools
        run: |
          yum install -y gcc make tar rpm-build rpmdevtools git
          echo "Ready to build!"

      - name: Get build script artifact
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ./

      - name: Create a working directory
        run: mkdir ${{ inputs.package }}

      - name: Copy build script in required directories
        run: |
          cp pkg-builder.sh ${{ inputs.package }}/
        shell: bash

      - name: Update permissions of the build scripts
        run: |
          chmod 755 ${{ inputs.package }}/*
          chmod 755 common-functions.sh
          chmod 755 install-deps.sh
          chmod 755 versions.sh
        shell: bash

      - name: Install dependencies
        if: inputs.install_deps
        run: |
          cd ${{ inputs.package }}
          mkdir test
          if [[ "${{ inputs.package }}" = "llvm" ]]; then
            ./pkg-builder.sh --builddir=$(pwd)/test --install_deps=1 ${{ inputs.additional_options }}
          else
            #./pkg-builder.sh --builddir=$(pwd)/test --branch=${{ inputs.branch }} --install_deps=1 ${{ inputs.additional_options }}
            install-deps.sh "postgresql"
          fi
        shell: bash

      - name: Get Sources
        if: inputs.get_sources
        run: |
          cd ${{ inputs.package }}
          if [[ "${{ inputs.package }}" = "etcd" ]]; then
            ./pkg-builder.sh --builddir=$(pwd)/test --get_sources=1 ${{ inputs.additional_options }}
          else
            ./pkg-builder.sh --builddir=$(pwd)/test --branch=${{ inputs.branch }} --get_sources=1 ${{ inputs.additional_options }}
          fi
        shell: bash

      - name: Build Source RPM
        if: inputs.build_src_rpm
        run: |
          cd ${{ inputs.package }}
          if [[ "${{ inputs.package }}" = "llvm" ]]; then
            ./pkg-builder.sh --builddir=$(pwd)/test --get_src_rpm=1 ${{ inputs.additional_options }}
          elif [[ "${{ inputs.package }}" = "etcd" ]]; then
            ./pkg-builder.sh --builddir=$(pwd)/test --build_src_rpm=1 ${{ inputs.additional_options }}
          else
            ./pkg-builder.sh --builddir=$(pwd)/test --branch=${{ inputs.branch }} --build_src_rpm=1 ${{ inputs.additional_options }}
          fi
        shell: bash

      - name: Build RPM
        if: inputs.build_rpm
        run: |
          cd ${{ inputs.package }}
          if [[ "${{ inputs.package }}" = "llvm" ]]; then
            ./pkg-builder.sh --builddir=$(pwd)/test --build_rpm=1 ${{ inputs.additional_options }}
          else
            ./pkg-builder.sh --builddir=$(pwd)/test --branch=${{ inputs.branch }} --build_rpm=1 ${{ inputs.additional_options }}
          fi
        shell: bash

      - name: Archive final rpm packages
        run: |
          cp -r ${{ inputs.package }}/rpm .
          tar -cvf rpm.tar rpm/
        shell: bash

      - name: Upload rpm tar as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.package }}-rpm-archive
          path: ./rpm.tar

      - name: enable tmate debugging
        if: inputs.debugging && failure()
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 60