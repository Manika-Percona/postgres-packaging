name: PG Packages Testing

on:
  workflow_dispatch:
    inputs:
      ppg-repo:
        description: ppg repo to be tested
        required: true
        default: ppg-15.14
        type: choice
        options:
          - ppg-17.6
          - ppg-16.10
          - ppg-15.14
          - ppg-14.19
          - ppg-13.22

      platform:
        description: platform to be tested on
        required: true
        default: oraclelinux:10
        type: choice
        options:
            - oraclelinux:10
            - oraclelinux:9
            - oraclelinux:8
            - ubuntu:noble
            - ubuntu:jammy
            - debian:bookworm
            - debian:bullseye

      debugging:
        description: tmate session required
        default: false
        type: boolean
        
jobs:
  test-package:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.platform }}

    steps:
      - name: Install basic tools
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            dnf makecache
            dnf install -y wget vim ca-certificates gcc gcc-c++ make
          else
            apt-get update
            apt-get install -y wget vim lsb-release ca-certificates build-essential
          fi
        shell: bash

      - name: Check OS
        run: cat /etc/os-release

      - name: Get OS version
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            OS_VER=$(rpm --eval %rhel)
          else
            OS_VER="$(lsb_release -sc)"
          fi
          echo "OS_VER="$OS_VER"" >> $GITHUB_ENV
        shell: bash

      - name: Get PG major version
        run: |
          PG_MAJOR=$(echo "${{ inputs.ppg-repo }}" | cut -d'-' -f2 | cut -d'.' -f1)
          echo "PG_MAJOR="$PG_MAJOR"" >> $GITHUB_ENV
        shell: bash

      - name: OS Version
        run: echo OS_VER = ${{ env.OS_VER }}

      - name: Enable required repositories
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            dnf config-manager --set-enabled ol${{ env.OS_VER }}_codeready_builder
          fi
        shell: bash

      - name: Enable ppg repository
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            yum -y install https://repo.percona.com/yum/percona-release-latest.noarch.rpm
          else
            wget https://repo.percona.com/apt/percona-release_latest.generic_all.deb
            dpkg -i percona-release_latest.generic_all.deb
            rm -f percona-release_latest.generic_all.deb
          fi
          percona-release disable all
          percona-release enable ${{ inputs.ppg-repo }} testing
        shell: bash

      - name: Install Packages
        run: |
          INSTALL_LIST="percona-postgresql-common percona-pgbackrest percona-pg_stat_monitor${{ env.PG_MAJOR }} percona-patroni percona-pgaudit${{ env.PG_MAJOR }}_set_user percona-pgbadger percona-pgbouncer percona-haproxy etcd*"
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            yum -y install percona-postgresql${{ env.PG_MAJOR }} percona-pg_repack${{ env.PG_MAJOR }} percona-pgaudit${{ env.PG_MAJOR }} percona-pgpool-II-pg${{ env.PG_MAJOR }} percona-postgis33_${{ env.PG_MAJOR }} percona-wal2json${{ env.PG_MAJOR }} percona-pg_gather percona-pgvector_${{ env.PG_MAJOR }} $INSTALL_LIST
          else
            apt-get -y install percona-postgresql$-{{ env.PG_MAJOR }} percona-postgresql-{{ env.PG_MAJOR }}-repack percona-postgresql-{{ env.PG_MAJOR }}-pgaudit percona-pgpool2 percona-postgis percona-postgresql-{{ env.PG_MAJOR }}-wal2json percona-pg-gather percona-postgresql-{{ env.PG_MAJOR }}-pgvector $INSTALL_LIST
          fi
        shell: bash

      - name: postgresql Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-postgresql)"
          else
            echo "package version = $(dpkg -l | grep percona-postgresql)"
          fi
          echo "binary version = $(psql --version)"
        shell: bash

      - name: postgresql-common Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-postgresql-common)"
          else
            echo "package version = $(dpkg -l | grep percona-postgresql-common)"
          fi
          echo "binary version = $(pg_config --version)"
        shell: bash

      - name: pgbackrest Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgbackrest)"
          else
            echo "package version = $(dpkg -l | grep percona-pgbackrest)"
          fi
          echo "binary version = $(pgbackrest --version)"
        shell: bash

      - name: pg_stat_monitor Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pg_stat_monitor)"
          else
            echo "package version = $(dpkg -l | grep percona-pg_stat_monitor)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'pg_stat_monitor';"
        shell: bash

      - name: pg_repack Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pg_repack)"
          else
            echo "package version = $(dpkg -l | grep percona-pg_repack)"
          fi
          echo "binary version = $(pg_repack --version)"
        shell: bash

      - name: pgaudit Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgaudit)"
          else
            echo "package version = $(dpkg -l | grep percona-pgaudit)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'pgaudit';"
        shell: bash

      - name: patroni Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-patroni)"
          else
            echo "package version = $(dpkg -l | grep percona-patroni)"
          fi
          echo "binary version = $(patroni --version)"
        shell: bash

      - name: pgaudit_set_user Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgaudit_set_user)"
          else
            echo "package version = $(dpkg -l | grep percona-pgaudit_set_user)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'pgaudit_set_user';"
        shell: bash

      - name: pgbadger Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgbadger)"
          else
            echo "package version = $(dpkg -l | grep percona-pgbadger)"
          fi
          echo "binary version = $(pgbadger --version)"
        shell: bash

      - name: pgbouncer Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgbouncer)"
          else
            echo "package version = $(dpkg -l | grep percona-pgbouncer)"
          fi
          echo "binary version = $(pgbouncer --version)"
        shell: bash

      - name: pgpool2 Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgpool)"
          else
            echo "package version = $(dpkg -l | grep percona-pgpool)"
          fi
          echo "binary version = $(pgpool --version)"
        shell: bash

      - name: postgis Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-postgis)"
          else
            echo "package version = $(dpkg -l | grep percona-postgis)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'postgis';"
        shell: bash

      - name: wal2json Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-wal2json)"
          else
            echo "package version = $(dpkg -l | grep percona-wal2json)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'wal2json';"
        shell: bash

      - name: haproxy Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-haproxy)"
          else
            echo "package version = $(dpkg -l | grep percona-haproxy)"
          fi
          echo "binary version = $(haproxy -v)"
        shell: bash

      - name: etcd Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-etcd)"
          else
            echo "package version = $(dpkg -l | grep percona-etcd)"
          fi
          echo "binary version = $(etcd --version)"
        shell: bash

      - name: pg_gather Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pg_gather)"
          else
            echo "package version = $(dpkg -l | grep percona-pg-gather)"
          fi
          echo "binary version = $(pg_gather --version)"
        shell: bash

      - name: pg_vector Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pg_vector)"
          else
            echo "package version = $(dpkg -l | grep percona-pg-vector)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'pg_vector';"
        shell: bash

      - name: enable tmate debugging
        if: inputs.debugging && failure()
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 60