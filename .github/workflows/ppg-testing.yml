name: PG Packages Testing

on:
  workflow_dispatch:
    inputs:
      ppg-repo:
        description: ppg repo to be tested
        required: true
        default: ppg-15.14
        type: choice
        options:
          - ppg-17.6
          - ppg-16.10
          - ppg-15.14
          - ppg-14.19
          - ppg-13.22

      platform:
        description: platform to be tested on
        required: true
        default: oraclelinux:10
        type: choice
        options:
            - oraclelinux:10
            - oraclelinux:9
            - oraclelinux:8
            - ubuntu:noble
            - ubuntu:jammy
            - debian:bookworm
            - debian:bullseye

      debugging:
        description: tmate session required
        default: false
        type: boolean
        
jobs:
  test-package:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.platform }}

    steps:
      - name: Install basic tools
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            dnf makecache
            dnf install -y wget vim ca-certificates gcc gcc-c++ make
          else
            apt-get update
            apt-get install -y wget vim lsb-release ca-certificates build-essential
          fi
        shell: bash

      - name: Check OS
        run: cat /etc/os-release

      - name: Get OS version
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            OS_VER=$(rpm --eval %rhel)
          else
            OS_VER="$(lsb_release -sc)"
          fi
          echo "OS_VER="$OS_VER"" >> $GITHUB_ENV
        shell: bash

      - name: Get PG major version
        run: |
          PG_MAJOR=$(echo "${{ inputs.ppg-repo }}" | cut -d'-' -f2 | cut -d'.' -f1)
          echo "PG_MAJOR="$PG_MAJOR"" >> $GITHUB_ENV
        shell: bash

      - name: OS Version
        run: echo OS_VER = ${{ env.OS_VER }}

      - name: Enable required repositories
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            dnf config-manager --set-enabled ol${{ env.OS_VER }}_codeready_builder
          fi
        shell: bash

      - name: Enable ppg repository
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            yum -y install https://repo.percona.com/yum/percona-release-latest.noarch.rpm
          else
            wget https://repo.percona.com/apt/percona-release_latest.generic_all.deb
            dpkg -i percona-release_latest.generic_all.deb
            rm -f percona-release_latest.generic_all.deb
          fi
          percona-release disable all
          percona-release enable ${{ inputs.ppg-repo }} testing
        shell: bash

      - name: Set RPM install list
        if: ${{ contains(inputs.platform, 'linux') }}
        run: | 
          PG="percona-postgresql17 percona-postgresql17-contrib percona-postgresql17-debuginfo percona-postgresql17-devel percona-postgresql17-docs percona-postgresql17-libs percona-postgresql17-llvmjit percona-postgresql17-plpython3 percona-postgresql17-plperl percona-postgresql17-pltcl percona-postgresql17-server percona-postgresql17-test percona-postgresql17-contrib-debuginfo percona-postgresql17-debuginfo percona-postgresql17-debugsource percona-postgresql17-devel-debuginfo percona-postgresql17-libs-debuginfo percona-postgresql17-plperl-debuginfo percona-postgresql17-pltcl-debuginfo percona-postgresql17-plpython3-debuginfo percona-postgresql17-server-debuginfo"
          PG_COMMON="percona-postgresql-common percona-postgresql-client-common"
          PPG_SERVER="percona-ppg-server17 percona-ppg-server-ha17"
          AUDIT="percona-pgaudit17 percona-pgaudit17_set_user"
          PGBACKREST="percona-pgbackrest"
          REPACK="percona-pg_repack17"
          PATRONI="percona-patroni"
          PGSM="percona-pg_stat_monitor17 percona-pg_stat_monitor17-debuginfo"
          PGBADGER="percona-pgbadger"
          PGBOUNCER="percona-pgbouncer"
          PGPOOL="percona-pgpool-II-pg17 percona-pgpool-II-pg17-extensions"
          POSTGIS="percona-postgis33_17 percona-postgis33_17-client percona-postgis33_17-client-debuginfo percona-postgis33_17-debuginfo percona-postgis33_17-devel percona-postgis33_17-docs percona-postgis33_17-gui percona-postgis33_17-gui-debuginfo percona-postgis33_17-llvmjit percona-postgis33_17-utils"
          WAL2JSON="percona-wal2json17"
          PGGATHER="percona-pg_gather"
          PGVECTOR="percona-pgvector_17 percona-pgvector_17-debuginfo percona-pgvector_17-debugsource percona-pgvector_17-llvmjit"
          ETCD="etcd python3-etcd"
          HAPROXY="percona-haproxy"
          echo "INSTALL_LIST="$PG $PG_COMMON $PPG_SERVER $AUDIT $PGBACKREST $REPACK $PATRONI $PGSM $PGBADGER $PGBOUNCER $PGPOOL $POSTGIS $WAL2JSON $PGGATHER $PGVECTOR $ETCD $HAPROXY"" >> $GITHUB_ENV

      - name: Set DEB package names
        if: ${{ !contains(inputs.platform, 'linux') }}
        run: | 
          PG="percona-postgresql percona-postgresql-17 percona-postgresql-all percona-postgresql-contrib percona-postgresql-doc percona-postgresql-doc-17 percona-postgresql-plperl-17 percona-postgresql-plpython3-17 percona-postgresql-pltcl-17 percona-postgresql-server-dev-17 percona-postgresql-server-dev-all percona-postgresql-17-dbgsym percona-postgresql-plperl-17-dbgsym percona-postgresql-plpython3-17-dbgsym percona-postgresql-pltcl-17-dbgsym percona-postgresql-plpython3-17 percona-postgresql-plpython3-17-dbgsym"
          PG_COMMON="percona-postgresql-client percona-postgresql-client-17 percona-postgresql-common percona-postgresql-client-17-dbgsym postgresql-client-common postgresql-common"
          PPG_SERVER="percona-ppg-server-17 percona-ppg-server-ha-17"
          AUDIT="percona-postgresql-17-pgaudit percona-postgresql-17-pgaudit-dbgsym percona-pgaudit17-set-user percona-pgaudit17-set-user-dbgsym"
          PGBACKREST="percona-pgbackrest percona-pgbackrest-doc percona-pgbackrest-dbgsym"
          REPACK="percona-postgresql-17-repack percona-postgresql-17-repack-dbgsym"
          PATRONI="percona-patroni percona-patroni-doc"
          PGSM="percona-pg-stat-monitor17 percona-pg-stat-monitor17-dbgsym"
          BADGER="percona-pgbadger"
          PGBOUNCER="percona-pgbouncer percona-pgbouncer-dbgsym"
          PGPOOL="percona-pgpool2 libpgpool2"
          POSTGIS="percona-postgresql-17-postgis-3 percona-postgresql-17-postgis-3-scripts percona-postgresql-postgis-scripts percona-postgresql-postgis percona-postgis"
          WAL2JSON="percona-postgresql-17-wal2json percona-postgresql-17-wal2json-dbgsym"
          PGGATHER="percona-pg-gather"
          PGVECTOR="percona-postgresql-17-pgvector"
          ETCD="etcd"" >> $GITHUB_ENV
          HAPROXY="percona-haproxy"
          if [[ ${{ env.OS_VER }} == 12 ]]; then
              ETCD="etcd-server etcd-client"
          fi
          echo "INSTALL_LIST="$PG $PG_COMMON $PPG_SERVER $AUDIT $PGBACKREST $REPACK $PATRONI $PGSM $PGBADGER $PGBOUNCER $PGPOOL $POSTGIS $WAL2JSON $PGGATHER $PGVECTOR $ETCD $HAPROXY"" >> $GITHUB_ENV

      - name: Install Packages
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            yum -y install ${{ env.INSTALL_LIST }}
          else
            apt-get -y install ${{ env.INSTALL_LIST }}
          fi
        shell: bash

      - name: postgresql Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-postgresql)"
          else
            echo "package version = $(dpkg -l | grep percona-postgresql)"
          fi
          echo "binary version = $(psql --version)"
        shell: bash

      - name: postgresql-common Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-postgresql-common)"
          else
            echo "package version = $(dpkg -l | grep percona-postgresql-common)"
          fi
          echo "binary version = $(pg_config --version)"
        shell: bash

      - name: pgbackrest Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgbackrest)"
          else
            echo "package version = $(dpkg -l | grep percona-pgbackrest)"
          fi
          echo "binary version = $(pgbackrest --version)"
        shell: bash

      - name: pg_stat_monitor Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pg_stat_monitor)"
          else
            echo "package version = $(dpkg -l | grep percona-pg_stat_monitor)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'pg_stat_monitor';"
        shell: bash

      - name: pg_repack Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pg_repack)"
          else
            echo "package version = $(dpkg -l | grep percona-pg_repack)"
          fi
          echo "binary version = $(pg_repack --version)"
        shell: bash

      - name: pgaudit Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgaudit)"
          else
            echo "package version = $(dpkg -l | grep percona-pgaudit)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'pgaudit';"
        shell: bash

      - name: patroni Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-patroni)"
          else
            echo "package version = $(dpkg -l | grep percona-patroni)"
          fi
          echo "binary version = $(patroni --version)"
        shell: bash

      - name: pgaudit_set_user Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgaudit_set_user)"
          else
            echo "package version = $(dpkg -l | grep percona-pgaudit_set_user)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'pgaudit_set_user';"
        shell: bash

      - name: pgbadger Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgbadger)"
          else
            echo "package version = $(dpkg -l | grep percona-pgbadger)"
          fi
          echo "binary version = $(pgbadger --version)"
        shell: bash

      - name: pgbouncer Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgbouncer)"
          else
            echo "package version = $(dpkg -l | grep percona-pgbouncer)"
          fi
          echo "binary version = $(pgbouncer --version)"
        shell: bash

      - name: pgpool2 Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pgpool)"
          else
            echo "package version = $(dpkg -l | grep percona-pgpool)"
          fi
          echo "binary version = $(pgpool --version)"
        shell: bash

      - name: postgis Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-postgis)"
          else
            echo "package version = $(dpkg -l | grep percona-postgis)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'postgis';"
        shell: bash

      - name: wal2json Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-wal2json)"
          else
            echo "package version = $(dpkg -l | grep percona-wal2json)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'wal2json';"
        shell: bash

      - name: haproxy Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-haproxy)"
          else
            echo "package version = $(dpkg -l | grep percona-haproxy)"
          fi
          echo "binary version = $(haproxy -v)"
        shell: bash

      - name: etcd Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-etcd)"
          else
            echo "package version = $(dpkg -l | grep percona-etcd)"
          fi
          echo "binary version = $(etcd --version)"
        shell: bash

      - name: pg_gather Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pg_gather)"
          else
            echo "package version = $(dpkg -l | grep percona-pg-gather)"
          fi
          echo "binary version = $(pg_gather --version)"
        shell: bash

      - name: pg_vector Version Check
        run: |
          if [[ "${{ inputs.platform }}" == *"linux"* ]]; then
            echo "package version = $(rpm -qa | grep percona-pg_vector)"
          else
            echo "package version = $(dpkg -l | grep percona-pg-vector)"
          fi
          psql -U postgres -d postgres -c "SELECT * FROM pg_available_extensions WHERE name = 'pg_vector';"
        shell: bash

      - name: enable tmate debugging
        if: inputs.debugging && failure()
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 60